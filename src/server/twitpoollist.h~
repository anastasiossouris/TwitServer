/**
	Copyright (c) 2009,2010, Tassos Souris
	All rights reserved.

	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are met:
		* Redistributions of source code must retain the above copyright
		  notice, this list of conditions and the following disclaimer.
		* Redistributions in binary form must reproduce the above copyright
		  notice, this list of conditions and the following disclaimer in the
		  documentation and/or other materials provided with the distribution.
		* Neither the name of the <organization> nor the
		  names of its contributors may be used to endorse or promote products
		  derived from this software without specific prior written permission.

	THIS SOFTWARE IS PROVIDED BY Tassos Souris ''AS IS'' AND ANY
	EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL Tassos Souris BE LIABLE FOR ANY
	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#if !defined( TWITPOOLLIST_H_IS_INCLUDED )
#define TWITPOOLLIST_H_IS_INCLUDED 1

#if defined( __cplusplus )
extern "C"{
#endif

#include <pthread.h>
#include "twit.h"
#include "twitpool.h"

/**
 * \struct twitpoollist
 *
 * The struct twitpoollist is an object that is used to keep a list of struct twitpool objects.
 */
struct twitpoollist{
	struct twitpoollist_node *tpl_head;
};

/**
 * \struct twitpoollist_node
 *
 * The struct twitpoollist_node is the object used as a node in the twitpoollist.
 */
struct twitpoollist_node{
	struct twitpoollist_node *tpln_next;
	struct twitpoollist_node *tpln_previous;
	struct twitpool tpln_twitpool;
	pthread_mutex_t tpln_lock; // Used to lock the twitpool; sayers put in here and hearers retrieve from here
	pthread_cond_t tpln_cond; // Used to signal that a twit was stored in the twitpool
};


/**
 * The inittwitpoollist() function shall initialize the struct twitpoollist object pointed to by parameter tpl. It is undefined
 * behavior if the other functions in this interface are called without the function inittwitpoollist() to have been called first.
 *
 * @return The inittwitpoollist() function shall return zero if successful; otherwise, -1 shall be returned and 
 * 	errno shall be set to indicate the error.
 * @param tpl Pointer to the struct twitpoollist object.
 * @exception EINVAL Parameter tpl is a NULL pointer.
 * @exception ENOBUFS Insufficient resources for the function to perform the operation.
 */
int inittwitpoollist( struct twitpoollist * restrict tpl );

/**
 * The newtwitpool() function shall create a new node in the struct twitpoollist object pointed to by parameter tpl. Function
 * newtwitpool() shall store the address of the new node in the object pointed to by parameter tplnode.
 *
 * @return The newtwitpool() function shall return zero if successful; otherwise, -1 shall be returned and errno shall be
 *	set to indicate the error.
 * @param tpl Pointer to the twitpoollist object.
 * @exception EINVAL At least one of the parameters is a NULL pointer.
 * @exception ENOMEM Insufficient storage space for the function to perform the operation.
 */
int newtwitpool( struct twitpoollist * restrict tpl, struct twitpoollist_node ** restrict tplnode );

/**
 * The removefromtwitpoollist() function shall remove from the list the node pointed to by  paramter tplnode.
 * It is undefined behavior if parameter tplnode has not been obtained via means of a call to the newtwitpool function.
 *
 * @return The removefromtwitpoollist() function shall return zero if successful; otherwise, -1 shall be returned and errno shall be
 *	set to indicate the error.
 * @exception EINVAL At least one of the parameters is a NULL pointer.
 */
int removefromtwitpoollist( struct twitpoollist * restrict tpl, struct twitpoollist_node * restrict tplnode );

/**
 * The deltwitpoollist() function shall deallocate all the resources reserved for the struct twitpoollist object 
 * pointed to by parameter tpl. If parameter tpl is a NULL pointer no action shall occur.
 *
 * @return Nothing.
 * @param tpl Pointer to the struct twitpoollist object.
 */
void deltwitpoollist( struct twitpoollist * restrict tpl );

#if defined( __cplusplus )
}
#endif

#endif
