/**
	Copyright (c) 2009,2010, Tassos Souris
	All rights reserved.

	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are met:
		* Redistributions of source code must retain the above copyright
		  notice, this list of conditions and the following disclaimer.
		* Redistributions in binary form must reproduce the above copyright
		  notice, this list of conditions and the following disclaimer in the
		  documentation and/or other materials provided with the distribution.
		* Neither the name of the <organization> nor the
		  names of its contributors may be used to endorse or promote products
		  derived from this software without specific prior written permission.

	THIS SOFTWARE IS PROVIDED BY Tassos Souris ''AS IS'' AND ANY
	EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL Tassos Souris BE LIABLE FOR ANY
	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/**
 * \file sighandling.c
 *
 * File sighandling.c contains the implementation of the sighandling.h interface.
 *
 * @author Tassos Souris
 */
#include <assert.h>
#include <signal.h>
#include <string.h>
#include <pthread.h>
#include "sighandling.h"



static sigset_t oldset;

void block_signals( void ){
	sigset_t sigset;

	while ( sigfillset( &sigset ) == -1 ){ continue; }
	while ( pthread_sigmask( SIG_SETMASK, &sigset, &oldset ) ){ continue; }

	return ;
}

void unblock_signals( void ){
	struct sigaction sigact;

	while ( pthread_sigmask( SIG_SETMASK, &oldset, NULL ) ){ continue; }
	
	while ( sigemptyset( sigset ) == -1 ){ continue; }

	// Ignore SIGPIPE. This **MUST** be done cause it is easier to get an EPIPE errno on write operations
	// from receiving SIGPIPE each time.
	( void )memset( &sigact, 0, sizeof( sigact ) );
	sigact.sa_handler = SIG_IGN;	
	while ( sigaction( SIGPIPE, &sigact, NULL ) == -1 ){ continue; }

	return ;
}

void setup_signals( sigset_t * restrict sigset ){
#define ADD_SIGNAL( signum ) do{ \
	while ( sigaddset( sigset, (signum) ) == -1 ){ continue; } \
}while ( 0 )	
	struct sigaction sigact;
	
	while ( sigemptyset( sigset ) == -1 ){ continue; }

	// set up for SIGQUIT
	ADD_SIGNAL( SIGQUIT );
	// set up for SIGINT
	ADD_SIGNAL( SIGINT );
	// set up for SIGHUP
	ADD_SIGNAL( SIGHUP );
	// set up for SIGTERM
	ADD_SIGNAL( SIGTERM );
	
	// set the signal mask
	while ( pthread_sigmask( SIG_BLOCK, sigset, NULL ) ){ continue; }

	// Ignore SIGPIPE. This **MUST** be done cause it is easier to get an EPIPE errno on write operations
	// from receiving SIGPIPE each time.
	( void )memset( &sigact, 0, sizeof( sigact ) );
	sigact.sa_handler = SIG_IGN;	
	while ( sigaction( SIGPIPE, &sigact, NULL ) == -1 ){ continue; }

	return ;
}
